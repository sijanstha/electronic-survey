// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sijanstha/electronic-voting-system/internal/core/ports (interfaces: UserRepository,PollRepository,PollOrganizerRepository)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -package=mockrepository -destination internal/adapters/repository/mock/mock.repository.go github.com/sijanstha/electronic-voting-system/internal/core/ports UserRepository,PollRepository,PollOrganizerRepository
//
// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	reflect "reflect"
	time "time"

	domain "github.com/sijanstha/electronic-voting-system/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(arg0 string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), arg0)
}

// SaveUser mocks base method.
func (m *MockUserRepository) SaveUser(arg0 *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserRepositoryMockRecorder) SaveUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserRepository)(nil).SaveUser), arg0)
}

// MockPollRepository is a mock of PollRepository interface.
type MockPollRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPollRepositoryMockRecorder
}

// MockPollRepositoryMockRecorder is the mock recorder for MockPollRepository.
type MockPollRepositoryMockRecorder struct {
	mock *MockPollRepository
}

// NewMockPollRepository creates a new mock instance.
func NewMockPollRepository(ctrl *gomock.Controller) *MockPollRepository {
	mock := &MockPollRepository{ctrl: ctrl}
	mock.recorder = &MockPollRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollRepository) EXPECT() *MockPollRepositoryMockRecorder {
	return m.recorder
}

// FindAllPoll mocks base method.
func (m *MockPollRepository) FindAllPoll(arg0 domain.PollListFilter) (*domain.PollPaginationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPoll", arg0)
	ret0, _ := ret[0].(*domain.PollPaginationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPoll indicates an expected call of FindAllPoll.
func (mr *MockPollRepositoryMockRecorder) FindAllPoll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPoll", reflect.TypeOf((*MockPollRepository)(nil).FindAllPoll), arg0)
}

// FindAllPollInStartedStateInDateRange mocks base method.
func (m *MockPollRepository) FindAllPollInStartedStateInDateRange(arg0, arg1 time.Time) ([]*domain.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPollInStartedStateInDateRange", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPollInStartedStateInDateRange indicates an expected call of FindAllPollInStartedStateInDateRange.
func (mr *MockPollRepositoryMockRecorder) FindAllPollInStartedStateInDateRange(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPollInStartedStateInDateRange", reflect.TypeOf((*MockPollRepository)(nil).FindAllPollInStartedStateInDateRange), arg0, arg1)
}

// FindAllPollInVotingStateInDateRange mocks base method.
func (m *MockPollRepository) FindAllPollInVotingStateInDateRange(arg0, arg1 time.Time) ([]*domain.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPollInVotingStateInDateRange", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPollInVotingStateInDateRange indicates an expected call of FindAllPollInVotingStateInDateRange.
func (mr *MockPollRepositoryMockRecorder) FindAllPollInVotingStateInDateRange(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPollInVotingStateInDateRange", reflect.TypeOf((*MockPollRepository)(nil).FindAllPollInVotingStateInDateRange), arg0, arg1)
}

// FindPoll mocks base method.
func (m *MockPollRepository) FindPoll(arg0 domain.PollFilter) (*domain.PollInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPoll", arg0)
	ret0, _ := ret[0].(*domain.PollInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPoll indicates an expected call of FindPoll.
func (mr *MockPollRepositoryMockRecorder) FindPoll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPoll", reflect.TypeOf((*MockPollRepository)(nil).FindPoll), arg0)
}

// SavePoll mocks base method.
func (m *MockPollRepository) SavePoll(arg0 *domain.Poll) (*domain.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoll", arg0)
	ret0, _ := ret[0].(*domain.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePoll indicates an expected call of SavePoll.
func (mr *MockPollRepositoryMockRecorder) SavePoll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoll", reflect.TypeOf((*MockPollRepository)(nil).SavePoll), arg0)
}

// UpdatePoll mocks base method.
func (m *MockPollRepository) UpdatePoll(arg0 *domain.Poll) (*domain.Poll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePoll", arg0)
	ret0, _ := ret[0].(*domain.Poll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePoll indicates an expected call of UpdatePoll.
func (mr *MockPollRepositoryMockRecorder) UpdatePoll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoll", reflect.TypeOf((*MockPollRepository)(nil).UpdatePoll), arg0)
}

// MockPollOrganizerRepository is a mock of PollOrganizerRepository interface.
type MockPollOrganizerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPollOrganizerRepositoryMockRecorder
}

// MockPollOrganizerRepositoryMockRecorder is the mock recorder for MockPollOrganizerRepository.
type MockPollOrganizerRepositoryMockRecorder struct {
	mock *MockPollOrganizerRepository
}

// NewMockPollOrganizerRepository creates a new mock instance.
func NewMockPollOrganizerRepository(ctrl *gomock.Controller) *MockPollOrganizerRepository {
	mock := &MockPollOrganizerRepository{ctrl: ctrl}
	mock.recorder = &MockPollOrganizerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollOrganizerRepository) EXPECT() *MockPollOrganizerRepositoryMockRecorder {
	return m.recorder
}

// SavePollOrganizer mocks base method.
func (m *MockPollOrganizerRepository) SavePollOrganizer(arg0 *domain.PollOrganizer) (*domain.PollOrganizer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePollOrganizer", arg0)
	ret0, _ := ret[0].(*domain.PollOrganizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePollOrganizer indicates an expected call of SavePollOrganizer.
func (mr *MockPollOrganizerRepositoryMockRecorder) SavePollOrganizer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePollOrganizer", reflect.TypeOf((*MockPollOrganizerRepository)(nil).SavePollOrganizer), arg0)
}
